#lang a

(require runtime/runtime compile/expand/syntax)
(provide parse-module)

(def unbound-reference-error
  (fn (id)
    (syntax-error (string-append "unbound reference " (identifier-string id)) id)))

(def gensym-counter (box 0))


; identifier -> string
(def gensym
  (fn (id)
    (def n (unbox gensym-counter))
    (def _ (set-box! gensym-counter (+ 1 n)))
    (string-append (prim-identifier-string id) (to-string n))))

; Env = (Hash Identifier EnvRHS)
; EnvRHS = (OneOf def-env-rhs (obj :core-form Parser))
; Parser = (-> Stx Env IR)

(def app-parser
  (fn (wexp env)
    (def exp (syntax-e wexp))
    (if (< (size exp) 1)
      (syntax-error "bad app syntax" wexp)
      (obj :app-exps (map (fn (e) (parse-exp e env)) exp)))))

(def if-parser
  (fn (wexp env)
    (def exp (syntax-e wexp))
    (if (not (= (size exp) 4))
      (syntax-error "bad if syntax" wexp)
      (obj :if-c (parse-exp (get exp 1) env)
            :if-t (parse-exp (get exp 2) env)
            :if-e (parse-exp (get exp 3) env)))))

(def and-parser
  (fn (wexp env)
    (def exp (syntax-e wexp))
    (if (not (= (size exp) 3))
      (syntax-error "bad and syntax" wexp)
      (obj :if-c (parse-exp (get exp 1) env)
            :if-t (parse-exp (get exp 2) env)
            :if-e (obj :literal false)))))

(def or-parser
  (fn (wexp env)
    (def exp (syntax-e wexp))
    (if (not (= (size exp) 3))
      (syntax-error "bad or syntax" wexp)
      (block
        (def tmpid (gensym (prim-make-identifier "tmp")))
        (obj :block-exp true
              :block-defs (list (obj :id tmpid :rhs (parse-exp (get exp 1) env)))
              :block-ret (obj :if-c (obj :local-ref tmpid)
                               :if-t (obj :local-ref tmpid)
                               :if-e (parse-exp (get exp 2) env)))))))

(def block-parser
  (fn (wexp env)
    (def exp (syntax-e wexp))
    (def parsed-block (parse-block (rest exp) env))
    (if (empty? (get parsed-block :block-defs))
      (get parsed-block :block-ret)
      (assoc parsed-block :block-exp true))))

(def fn-parser
  (fn (wexp env)
    (def exp (syntax-e wexp))
    (if (< (size exp) 3)
      (syntax-error "bad fn syntax" wexp)
      (block
        (def args (syntax-e (get exp 1)))
        (def _ (if (not (and (list? args) (map identifier? args)))
                 (syntax-error "bad fn syntax" wexp)
                 null))
        (def new-env (foldl (fn (env arg) (assoc env (syntax-e arg) (obj :local-ref (gensym (syntax-e arg))))) env args))
        (assoc
          (assoc (parse-block (rest (rest exp)) new-env)
                 :fn-args (map (fn (arg) (get (get new-env (syntax-e arg)) :local-ref)) args))
          ; A hack: the compiler only needs temporaries for this one transform,
          ; so we'll generate them here.
          :fn-temps (map gensym (map syntax-e args)))))))

(def loop-parser
  (fn (wexp env)
    (def exp (syntax-e wexp))
    (if (< (size exp) 3)
      (syntax-error "bad loop syntax" wexp)
      (block
        (def binding-list (syntax-e (get exp 1)))
        (def _ (if (not (list? binding-list))
                 (syntax-error "bad loop binding list" (get exp 1))
                 null))
        (def surface-vars (map (fn (pr) (get (syntax-e pr) 0)) binding-list))
        (def new-env (foldl (fn (env var) (assoc env (syntax-e var) (obj :local-ref (gensym (syntax-e var))))) env surface-vars))
        (assoc
          (assoc (parse-block (rest (rest exp)) new-env)
                 :loop-vars (map (fn (var) (get (get new-env (syntax-e var)) :local-ref)) surface-vars))
          :loop-inits (map (fn (pr) (parse-exp (get (syntax-e pr) 1) env)) binding-list))))))

(def recur-parser
  (fn (wexp env)
    (def exp (syntax-e wexp))
    (obj :recur-exps (map (fn (e) (parse-exp e env)) (rest exp))
          :recur-temps (map (fn (_) (gensym (prim-make-identifier "tmp"))) (rest exp)))))

(def def-env-rhs (obj :def true))

(def initial-env
  (hash (prim-make-identifier "def") def-env-rhs
        (prim-make-identifier "fn") (obj :core-form fn-parser)
        (prim-make-identifier "if") (obj :core-form if-parser)
        (prim-make-identifier "or") (obj :core-form or-parser)
        (prim-make-identifier "and") (obj :core-form and-parser)
        (prim-make-identifier "loop") (obj :core-form loop-parser)
        (prim-make-identifier "block") (obj :core-form block-parser)
        (prim-make-identifier "recur") (obj :core-form recur-parser)))

(def match-def
  (fn (form env)
    (if (and (syntax? form)
             (and (list? (syntax-e form))
                  (equal? def-env-rhs (get env (syntax-e (get (syntax-e form) 0))))))
      (if (and (= 3 (size (syntax-e form)))
               (identifier? (get (syntax-e form) 1)))
        (obj :id (get (syntax-e form) 1) :exp (get (syntax-e form) 2))
        (syntax-error "bad def syntax" form))
      ; right now, it's always a sequence of defs than an exp in a block
      (syntax-error "bad def syntax" form))))

(def parse-defs
  (fn (forms env)
    (def defs (map (fn (f) (match-def f env)) forms))
    (def surface-ids (map (fn (d) (get d :id)) defs))
    (def new-env (foldl (fn (env id) (assoc env (syntax-e id) (obj :local-ref (gensym (syntax-e id))))) env surface-ids))
    (def rhss (map (fn (d) (parse-exp (get d :exp) new-env)) defs))
    (obj :block-defs (zip (fn (id rhs) (obj :id id :rhs rhs))
                           (map (fn (id) (get (get new-env (syntax-e id)) :local-ref)) surface-ids)
                           rhss)
          :surface-def-ids surface-ids
          :new-env new-env)))

(def parse-block
  (fn (forms env)
    (if (= 0 (size forms))
      (error "parse" "block must have at least one form")
      (block
        (def reversed (reverse forms))
        (def parsed-defs (parse-defs (reverse (rest reversed)) env))
        (def new-env (get parsed-defs :new-env))
        (def parsed-ret (parse-exp (first reversed) new-env))
        (obj :block-defs (get parsed-defs :block-defs)
              :block-ret parsed-ret)))))

(def parse-exp
  (fn (wexp env)
    (def exp (syntax-e wexp))
    (if (or (number? exp) (string? exp))
      (obj :literal exp)
      (if (prim-identifier? exp)
        (if (not (has env exp))
          (unbound-reference-error wexp)
          (block
            (def env-entry (get env exp))
            (if (or (has env-entry :local-ref) (has env-entry :module-ref-path))
              env-entry
              (if (has env-entry :core-form)
                (syntax-error "syntactic form referenced as variable" wexp)
                (error "parse-exp internal error" "malformed environment")))))
        (block
          (def rator (get exp 0))
          (if (and (and (identifier? rator) (has env (syntax-e rator))) (has (get env (syntax-e rator)) :core-form))
            ((get (get env (syntax-e rator)) :core-form) wexp env)
            (app-parser wexp env)))))))

(def andmap
  (fn (f l)
    (foldl (fn (a b) (and a b)) true
           (map f l))))

(def syntax-error
  (fn (msg stx)
    (def loc (get stx :loc))
    (def source (get loc :source))
    (def position->string
      (fn (pos)
        (string-append (number->string (get pos :line)) ":" (number->string (+ 1 (get pos :column))))))
    (def range (string-append (position->string (get loc :start)) "-" (position->string (get loc :end))))
    (error (string-append "syntax error in " source " at " range) msg)))

; Sexp, Runner -> IRModule
(def parse-module
  (fn (sexp runner)
    (def module-syntax-error
      (fn (stx) (syntax-error "module must start with require and provide forms" stx)))

    (def _ (if (not (list? sexp))
             (contract-error "parse-module" "(ListOf Syntax)" sexp)
             null))

    (def valid-reqprov?
      (fn (wform name)
        (and (syntax? wform)
             (block
               (def form (syntax-e wform))
               (and (and (list? form)
                         (> (size form) 0))
                    (and (equal? (syntax-e (get form 0)) (prim-make-identifier name))
                         (andmap identifier? (rest form))))))))

    (def require-form (get sexp 0))
    (def _2 (if (not (valid-reqprov? require-form "require"))
              (module-syntax-error require-form)
              null))

    (def provide-form (get sexp 1))
    (def _3 (if (not (valid-reqprov? provide-form "provide"))
              (module-syntax-error provide-form)
              null))

    (def requires (map syntax-e (rest (syntax-e require-form))))
    (def provides (map syntax-e (rest (syntax-e provide-form))))
    (def body (rest (rest sexp)))

    (def module-env
      (foldl (fn (env req)
               (def decl ((get runner :load) (prim-identifier-string req)))
               (foldl
                 (fn (env export)
                   (assoc env (prim-make-identifier (get export :key))
                          (obj :module-ref-path (prim-identifier-string req)
                               :module-ref-field (get export :val))))
                 env
                 (hash-entries (get decl :exports))))
             initial-env requires))

    (def parsed-defs (parse-defs body module-env))

    (def _4 (if (not (subset provides (map syntax-e (get parsed-defs :surface-def-ids))))
              (error "syntax error" "some provided identifiers not defined")
              null))

    (def provide-internal-ids
      (map (fn (p) (get (get (get parsed-defs :new-env) p) :local-ref))
           provides))

    (def provides-map
      (foldl (fn (acc provide)
               (assoc acc (prim-identifier-string provide) (get (get (get parsed-defs :new-env) provide) :local-ref)))
             (hash)
             provides))

    (obj
      :module-requires (map prim-identifier-string requires)
      :module-provides provides-map
      :block-defs (get parsed-defs :block-defs))))
