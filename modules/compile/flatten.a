#lang a

(require runtime/runtime compile/lang vendor/escodegen compile/expand)
(provide flatten)

(def gen-module-instance-declaration
  (fn (name source)
    (obj :type "ExpressionStatement"
         :expression
         (obj :type "AssignmentExpression"
              :operator "="
              :left (obj :type "MemberExpression"
                         :object (obj :type "Identifier"
                                      :name "$g")
                         :property (obj :type "Literal"
                                        :value name)
                         :computed true)
              :right (obj :type "CallExpression"
                                :callee (obj :type "Literal"
                                             :verbatim source)
                                :arguments (array (obj :type "Identifier" :name "$g")))))))

(def gen-iife-block-expression-statement
  (fn (body)
    (obj :type "ExpressionStatement"
         :expression (obj :type "FunctionExpression"
                          :id null
                          :params (array)
                          :body (obj :type "BlockStatement"
                                     :body (list->array body))))))

(def find-internal-name
  (fn (decl name)
    (def m (foldl
             (fn (acc el)
               (assoc acc (get el :key) (get el :val)))
             (hash)
             (zip (fn (a b) (obj :key a :val b)) (get decl :exports) (get decl :export-rt-ids))))
    (if (has m name)
      (get m name)
      (error "flatten" (string-append "method " name " not exported by module")))))

(def flatten
  (fn (runner main-module-name main-fn-name)
    ; TODO: clean up with support for expressions in defn sequence
    (def _ (string/c "flatten" main-module-name))
    (def flatten-internal
      (fn (acc module-name)
        (if (has (get acc :visited) module-name)
          acc
          (block
            (def compiled ((get runner :load) module-name))
            (def acc2 (foldl flatten-internal acc (get compiled :imports)))
            (def instance-declaration
              (gen-module-instance-declaration
                module-name
                (get compiled :body-code)))
            (obj :declarations (cons instance-declaration (get acc2 :declarations))
                 :visited (assoc (get acc2 :visited) module-name true))))))
    (def module-declarations
      (reverse (get (flatten-internal (obj :declarations (list) :visited (hash)) main-module-name) :declarations)))
    (generate ; escodegen
      (gen-iife-block-expression-statement
        (cons
          (obj :type "VariableDeclaration"
               :declarations
               (array
                 (obj :type "VariableDeclarator"
                      :id (obj :type "Identifier"
                               :name "$g")
                      :init (obj :type "ObjectExpression"
                                 :properties (array))))
               :kind "const")
          (append
            module-declarations
            (list (obj :type "ReturnStatement"
                       :argument
                       (obj :type "MemberExpression"
                            :object
                            (obj :type "MemberExpression"
                                 :object (obj :type "Identifier"
                                              :name "$g")
                                 :property (obj :type "Literal"
                                                :value main-module-name)
                                 :computed true)
                            :property (obj :type "Literal"
                                                :value (find-internal-name ((get runner :load) main-module-name) main-fn-name))
                            :computed true))))))
      (obj :verbatim :verbatim))))
