#lang a

(require runtime/runtime compile/lang)
(provide make-runner)

; Runner: (obj :load (-> ModuleName ModuleDeclaration) :run (-> ModuleName ModuleInstance))

; Platform -> Runner
(def make-runner
  (fn (platform)
    (def declaration-map (box (hash)))
    (def instance-map (box (hash)))

    (def load
      (fn (module-name)
        (if (has (unbox declaration-map) module-name)
          (get (unbox declaration-map) module-name)
          (block
            (def source ((get platform :resolve) module-name))
            (def module-declaration (compile-via-lang source (obj :load load :run run)))
            (def module-declaration2
              (assoc module-declaration
                     :body-function
                     ((get platform :eval-module)
                      (get module-declaration :body-code))))
            ; TODO: clean up with expression in def ctx
            (def _ (set-box! declaration-map
                             (assoc (unbox declaration-map)
                                    module-name module-declaration2)))
            module-declaration2))))

    ; TODO: should be in a standard library somewhere
    (def andmap
      (fn (f l)
        (foldl (fn (a b) (and a b)) true
               (map f l))))

    (def run
      (fn (module-name)
        (def _ (string/c "run" module-name))
        (if (has (unbox instance-map) module-name)
          (get (unbox instance-map) module-name)
          (block
            (def module-declaration (load module-name))
            (def _1 (map run (get module-declaration :imports)))
            (def instance ((get module-declaration :body-function)
                           (hash->object (unbox instance-map))))
            ; TODO: clean up with expression in def ctx and when
            (def _2 (if (not (andmap (fn (export) (has instance export))
                                     (hash-values (get module-declaration :exports))))
                     (error "run"
                            (string-append
                              "Module instance does not include all keys listed in exports: "
                              module-name))
                     null))
            (def _3 (set-box! instance-map (assoc (unbox instance-map) module-name instance)))
            instance
            ))))

    (obj :load load :run run)))
